import SwiftUI

struct NewMessageView: View {
    let onUserSelected: ((User) -> Void)?
    
    @Environment(\.dismiss) private var dismiss
    @State private var searchText = ""
    @State private var users: [User] = []
    @State private var isLoading = false
    @State private var error: APIError?
    @State private var searchTask: Task<Void, Never>?
    @Environment(\.horizontalSizeClass) var horizontalSizeClass
    @Environment(\.verticalSizeClass) var verticalSizeClass
    
    // iPad detection
    private var isIPad: Bool {
        horizontalSizeClass == .regular && verticalSizeClass == .regular
    }
    
    private let apiService = APIService.shared
    
    init(onUserSelected: ((User) -> Void)? = nil) {
        self.onUserSelected = onUserSelected
    }
    
    var body: some View {
        NavigationStack {
            GeometryReader { geometry in
                VStack(spacing: 0) {
                    searchSection
                    usersList
                }
                .frame(maxWidth: isIPad ? min(geometry.size.width * 0.8, 800) : .infinity)
                .frame(maxHeight: .infinity)
                .clipped()
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .background(Color(.systemBackground))
        }
        .navigationTitle("New Message")
        .navigationBarTitleDisplayMode(.large)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                Button("Cancel") {
                    dismiss()
                }
                .foregroundColor(Color("BrandPrimary"))
            }
        }
        .alert("Error", isPresented: Binding<Bool>(
            get: { error != nil },
            set: { _ in error = nil }
        )) {
            Button("OK") {
                error = nil
            }
        } message: {
            Text(error?.localizedDescription ?? "An error occurred.")
        }
    }
    
    // MARK: - Components
    
    private var searchSection: some View {
        VStack(spacing: 0) {
            HStack {
                Image(systemName: "magnifyingglass")
                    .foregroundColor(.gray)
                
                TextField("Search users...", text: $searchText)
                    .textFieldStyle(PlainTextFieldStyle())
                    .onChange(of: searchText) { _, newValue in
                        searchUsers(query: newValue)
                    }
                
                if !searchText.isEmpty {
                    Button(action: {
                        searchText = ""
                        users = []
                    }) {
                        Image(systemName: "xmark.circle.fill")
                            .foregroundColor(.gray)
                    }
                }
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 8)
            .background(Color(.systemGray6))
            .cornerRadius(8)
            .padding(.horizontal, isIPad ? 40 : 16)
            .padding(.vertical, 16)
            
            Divider()
        }
    }
    
    private var usersList: some View {
        Group {
            if isLoading {
                LoadingView()
            } else if users.isEmpty && !searchText.isEmpty {
                EmptyStateView(
                    title: "No Users Found",
                    message: "Try searching with a different name or username.",
                    systemImage: "person.2.slash"
                )
            } else if searchText.isEmpty {
                EmptyStateView(
                    title: "Search for Users",
                    message: "Start typing to search for users to message.",
                    systemImage: "magnifyingglass"
                )
            } else {
                List {
                    ForEach(users) { user in
                        UserRow(user: user) {
                            onUserSelected?(user)
                            dismiss()
                        }
                        .listRowSeparator(.hidden)
                        .listRowInsets(EdgeInsets(
                            top: 8,
                            leading: isIPad ? 40 : 16,
                            bottom: 8,
                            trailing: isIPad ? 40 : 16
                        ))
                    }
                }
                .listStyle(PlainListStyle())
                .scrollIndicators(.hidden)
            }
        }
    }
    
    // MARK: - Methods
    
    private func searchUsers(query: String) {
        // Cancel previous search task
        searchTask?.cancel()
        
        guard !query.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {
            users = []
            return
        }
        
        searchTask = Task {
            isLoading = true
            error = nil
            
            do {
                // Simulate API delay
                try await Task.sleep(nanoseconds: 300_000_000) // 0.3 seconds
                
                // Check if task was cancelled
                try Task.checkCancellation()
                
                let usersResponse = try await apiService.fetchUsers(search: query)
                let searchResults = usersResponse.data.users.map { searchUser in
                    User(
                        id: searchUser.id,
                        username: searchUser.username,
                        email: searchUser.email,
                        firstName: searchUser.firstName,
                        lastName: searchUser.lastName,
                        profileImageUrl: nil,
                        bio: searchUser.bio,
                        universityId: searchUser.universityId,
                        createdAt: searchUser.createdAt,
                        updatedAt: searchUser.updatedAt
                    )
                }
                
                // Check if task was cancelled after API call
                try Task.checkCancellation()
                
                await MainActor.run {
                    self.users = usersResponse.data.users.map { searchUser in
                        searchUser.asUser
                    }
                    self.isLoading = false
                }
            } catch is CancellationError {
                // Task was cancelled, do nothing
            } catch {
                await MainActor.run {
                    self.error = error as? APIError ?? APIError.networkError
                    self.isLoading = false
                }
            }
        }
    }
}

// MARK: - User Row
struct UserRow: View {
    let user: User
    let onTap: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 12) {
                ProfileImageView(imageUrl: user.profileImageUrl, size: .medium)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(user.fullName)
                        .font(.headline)
                        .fontWeight(.semibold)
                        .foregroundColor(.primary)
                    
                    Text("@\(user.username)")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    if let bio = user.bio, !bio.isEmpty {
                        Text(bio)
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .lineLimit(1)
                    }
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .padding(.vertical, 8)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

struct NewMessageView_Previews: PreviewProvider {
    static var previews: some View {
        NewMessageView { user in
            print("Selected user: \(user.fullName)")
        }
    }
} 